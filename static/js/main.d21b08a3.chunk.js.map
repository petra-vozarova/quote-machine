{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","id","class","href","target","$","css","quotes","backImages","setImage","randomIndex","Math","floor","random","length","randomImage","animate","opacity","this","setQuote","newQuote","quote","author","text","html","document","ready","ajax","headers","Accept","url","success","result","JSON","parse","then","on","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","console","message"],"mappings":"uQA2BeA,MApBf,WACE,OACF,yBAAKC,GAAG,SACN,yBAAKA,GAAG,aACN,yBAAKA,GAAG,cACN,wBAAIA,GAAG,SACP,uBAAGA,GAAG,YAER,yBAAKC,MAAM,WACT,4BAAQD,GAAG,aAAY,0CAEvB,uBAAGA,GAAG,cAAcE,KAAK,8EAA8EC,OAAO,UAC5G,4BAAI,8BAAM,uBAAGF,MAAM,+BAU3BG,IAAE,QAAQC,IAAI,cAAe,aAC7BD,IAAE,cAAcC,IAAI,gBAAiB,MACrCD,IAAE,cAAcC,IAAI,gBAAiB,MACrCD,IAAE,QAAQC,IAAI,YAAa,SAE3B,IAwBIC,EAxBAC,EAAa,CACf,wIACA,wIACA,wIACA,wIACA,wIACA,8GACA,wIACA,sIACA,wIACA,0IAGF,SAASC,IACP,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAWM,QACpDC,EAAcP,EAAWE,GAC7BL,IAAE,UAAUW,QAAQ,CAAEC,QAAS,GAAK,IAAI,WACtCZ,IAAE,UAAUC,IAAI,mBAAoB,QAAUS,EAAc,MAC5DV,IAAE,UAAUC,IAAI,oBAAqB,aACrCD,IAAE,UAAUC,IAAI,kBAAmB,SACnCD,IAAEa,MAAMF,QAAQ,CAAEC,QAAS,QAuB/B,SAASE,IACP,IAAIC,GALIb,EAAOA,OAAOI,KAAKC,MAAsB,IAAhBD,KAAKE,WAC/BN,EAAOA,OAAOI,KAAKC,MAAMD,KAAKE,SAAWN,EAAOA,OAAOO,UAK1DO,EAAQD,EAASC,MACjBC,EAASF,EAASE,OAEtBjB,IAAE,cAAcW,QAAQ,CAAEC,QAAS,GAAK,KAAK,WAC3CZ,IAAEa,MAAMF,QAAQ,CAAEC,QAAS,IAAO,KAClCZ,IAAE,SAASkB,KAAKF,GAChBhB,IAAE,WAAWmB,KAAK,UAAYF,EAAS,gBAI3CjB,IAAEoB,UAAUC,OAAM,WA5BTrB,IAAEsB,KAAK,CACZC,QAAS,CAAEC,OAAQ,oBACnBC,IACE,yIACFC,QAAS,SAAUC,GACK,kBAAXA,IACTzB,EAAS0B,KAAKC,MAAMF,OAuBdG,MAAK,WACfhB,IACAV,OAEFJ,IAAE,cAAc+B,GAAG,QAASjB,GAC5Bd,IAAE,cAAc+B,GAAG,QAAS3B,MCnFV4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcrB,MACrBS,MAAK,SAAAa,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d21b08a3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport $ from 'jquery'\n\n\n\n\nfunction App() {\n  return (\n<div id='image'>\n  <div id='quote-box'>\n    <div id='quotesInfo'>\n      <h2 id='text'></h2>\n      <p id='author'></p>\n    </div>\n    <div class='buttons'>\n      <button id='new-quote'><em>New Quote</em></button>\n\n      <a id='tweet-quote' href=\"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\" target='_blank'>\n        <li><span><i class='fa fa-twitter fa-3x'></i></span></li>\n      </a>\n    </div>\n  </div>\n</div>\n  );\n}\n\nexport default App;\n\n$(\"body\").css(\"font-family\", \"Heuretice\");\n$(\"#new-quote\").css(\"border-radius\", \"4%\");\n$(\"#quote-box\").css(\"border-radius\", \"4%\");\n$(\"body\").css(\"font-size\", \"1.5em\");\n\nlet backImages = [\n  \"https://images.unsplash.com/photo-1591693971635-7541a48405fd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\",\n  \"https://images.unsplash.com/photo-1588450308351-714b3858d37d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=564&q=80\",\n  \"https://images.unsplash.com/photo-1567803915757-502f6a92fedb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=700&q=80\",\n  \"https://images.unsplash.com/photo-1567875646289-adfd6d899664?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=613&q=80\",\n  \"https://images.unsplash.com/photo-1584197015778-02d47f803d5b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=80\",\n  \"https://images.unsplash.com/photo-1585338129664-c573a9554a61?ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80\",\n  \"https://images.unsplash.com/photo-1587575171939-19180d5a9ebd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\",\n  \"https://images.unsplash.com/photo-1560966638-744df0fe1249?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1351&q=80\",\n  \"https://images.unsplash.com/photo-1585338129687-ce6e9bc2af63?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\",\n  \" https://images.unsplash.com/photo-1585337931979-fab8f78ff2d5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\"\n];\nvar usedIndex = [];\nfunction setImage() {\n  let randomIndex = Math.floor(Math.random() * backImages.length);\n  let randomImage = backImages[randomIndex];\n  $(\"#image\").animate({ opacity: 0 }, 25, function () {\n    $(\"#image\").css(\"background-image\", \"url('\" + randomImage + \"')\");\n    $(\"#image\").css(\"background-repeat\", \"no-repeat\");\n    $(\"#image\").css(\"background-size\", \"cover\");\n    $(this).animate({ opacity: 0.9 });\n  });\n}\n\nlet quotes;\n\nfunction getQuotes() {\n  return $.ajax({\n    headers: { Accept: \"application/json\" },\n    url:\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\",\n    success: function (result) {\n      if (typeof result === \"string\") {\n        quotes = JSON.parse(result);\n      }\n    }\n  });\n}\nfunction randomQuote() {\n  let a = quotes.quotes[Math.floor(Math.random() * 100)];\n  return quotes.quotes[Math.floor(Math.random() * quotes.quotes.length)];\n}\n\nfunction setQuote() {\n  let newQuote = randomQuote();\n  let quote = newQuote.quote;\n  let author = newQuote.author;\n\n  $(\"#quote-box\").animate({ opacity: 0 }, 400, function () {\n    $(this).animate({ opacity: 0.9 }, 400);\n    $(\"#text\").text(quote);\n    $(\"#author\").html(\"<p><em>\" + author + \"</em></p>\");\n  });\n}\n\n$(document).ready(function () {\n  getQuotes().then(() => {\n    setQuote();\n    setImage();\n  });\n  $(\"#new-quote\").on(\"click\", setQuote);\n  $(\"#new-quote\").on(\"click\", setImage);\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}